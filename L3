#include <iostream>
#include <list>
#include <initializer_list>
#include <stdexcept>
#include <memory> 


class CustomException : public std::runtime_error {
public:
    explicit CustomException(const std::string& message) : std::runtime_error(message) {}
};

template <typename T>
class SmartPointer {
private:
    T* ptr;
public:
    explicit SmartPointer(T* p = nullptr) : ptr(p) {}
    ~SmartPointer() { delete ptr; }

    T& operator*() { return *ptr; }
    T* operator->() { return ptr; }

    SmartPointer(const SmartPointer&) = delete;
    SmartPointer& operator=(const SmartPointer&) = delete;

    SmartPointer(SmartPointer&& other) noexcept : ptr(other.ptr) {
        other.ptr = nullptr;
    }

    SmartPointer& operator=(SmartPointer&& other) noexcept {
        if (this != &other) {
            delete ptr;
            ptr = other.ptr;
            other.ptr = nullptr;
        }
        return *this;
    }
};


template <typename T>
class Vect {
private:
    std::list<T> data;

public:
   
    Vect() = default;
 
    Vect(std::initializer_list<T> ilist) : data(ilist) {}

    Vect(const Vect& other) : data(other.data) {}

    Vect& operator=(const Vect& other) {
        if (this != &other) {
            data = other.data;
        }
        return *this;
    }
    
    Vect(Vect&& other) noexcept : data(std::move(other.data)) {}
   
    Vect& operator=(Vect&& other) noexcept {
        if (this != &other) {
            data = std::move(other.data);
        }
        return *this;
    }
   
    void push_back(const T& value) {
        data.push_back(value);
    }

    void pop_back() {
        if (data.empty()) {
            throw std::out_of_range("Vect is empty");
        }
        data.pop_back();
    }
    
    size_t size() const {
        return data.size();
    }
  
    T& at(size_t index) {
        if (index >= data.size()) {
            throw std::out_of_range("Index out of range");
        }
        auto it = data.begin();
        std::advance(it, index);
        return *it;
    }

    const T& at(size_t index) const {
        if (index >= data.size()) {
            throw std::out_of_range("Index out of range");
        }
        auto it = data.cbegin();
        std::advance(it, index);
        return *it;
    }
};

int main() {
    try {
        Vect<int> v = {1, 2, 3, 4, 5};
        v.push_back(6);
        std::cout << "Size: " << v.size() << std::endl;

        for (size_t i = 0; i < v.size(); ++i) {
            std::cout << v.at(i) << " ";
        }
        std::cout << std::endl;

        v.pop_back();
        std::cout << "Size after pop_back: " << v.size() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
