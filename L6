#include <windows.h>
#include <vector>
#include <fstream>

struct Rectangle {
    int x, y, w, h;
    COLORREF color;
};

std::vector<Rectangle> rectangles;

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
void AddRectangle();
void SaveRectangles(const char* filename);
void LoadRectangles(const char* filename);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    WNDCLASS wc = {0};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = TEXT("MyWindowClass");

    RegisterClass(&wc);

    HWND hwnd = CreateWindow(wc.lpszClassName, TEXT("Windows Rectangle Drawer"), WS_OVERLAPPEDWINDOW,
                             CW_USEDEFAULT, CW_USEDEFAULT, 500, 500, NULL, NULL, hInstance, NULL);

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int) msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
        case WM_CREATE:
            CreateWindow(TEXT("button"), TEXT("Add Rectangle"), WS_VISIBLE | WS_CHILD,
                         20, 420, 150, 30, hwnd, (HMENU) 1, NULL, NULL);
            CreateWindow(TEXT("button"), TEXT("Save"), WS_VISIBLE | WS_CHILD,
                         190, 420, 150, 30, hwnd, (HMENU) 2, NULL, NULL);
            CreateWindow(TEXT("button"), TEXT("Load"), WS_VISIBLE | WS_CHILD,
                         360, 420, 150, 30, hwnd, (HMENU) 3, NULL, NULL);
            break;
        case WM_COMMAND:
            if (LOWORD(wParam) == 1) {
                AddRectangle();
                InvalidateRect(hwnd, NULL, TRUE);
            } else if (LOWORD(wParam) == 2) {
                SaveRectangles("rectangles.dat");
            } else if (LOWORD(wParam) == 3) {
                LoadRectangles("rectangles.dat");
                InvalidateRect(hwnd, NULL, TRUE);
            }
            break;
        case WM_PAINT: {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            for (const auto& rect : rectangles) {
                HBRUSH brush = CreateSolidBrush(rect.color);
                RECT r = {rect.x, rect.y, rect.x + rect.w, rect.y + rect.h};
                FillRect(hdc, &r, brush);
                DeleteObject(brush);
            }
            EndPaint(hwnd, &ps);
            break;
        }
        case WM_DESTROY:
            PostQuitMessage(0);
            break;
        default:
            return DefWindowProc(hwnd, msg, wParam, lParam);
    }
    return 0;
}

void AddRectangle() {
    int x = rand() % 300;
    int y = rand() % 300;
    int w = 100;
    int h = 100;
    COLORREF color = RGB(rand() % 256, rand() % 256, rand() % 256);
    rectangles.push_back({x, y, w, h, color});
}

void SaveRectangles(const char* filename) {
    std::ofstream ofs(filename, std::ios::binary);
    size_t count = rectangles.size();
    ofs.write(reinterpret_cast<const char*>(&count), sizeof(count));
    for (const auto& rect : rectangles) {
        ofs.write(reinterpret_cast<const char*>(&rect), sizeof(rect));
    }
}

void LoadRectangles(const char* filename) {
    std::ifstream ifs(filename, std::ios::binary);
    size_t count;
    ifs.read(reinterpret_cast<char*>(&count), sizeof(count));
    rectangles.resize(count);
    ifs.read(reinterpret_cast<char*>(rectangles.data()), count * sizeof(Rectangle));
}
